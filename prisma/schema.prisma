// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  username String
  email    String   @unique
  password String
  role     String
  createAt DateTime @default(now())


  //avatar
  avatarUrl String?
  avatarPublicId String?

  carts  Cart[]
  orders Order[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  categoryId  Int
  name        String
  description String?
  createAt    DateTime @default(now())

  //img 
  imageUrl      String?
  imagePublicId String?

  category Category         @relation(fields: [categoryId], references: [id])
  variants ProductVariant[]
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  size      String?
  color     String?
  price     Decimal @db.Decimal(10, 2)
  stock     Int

  product    Product     @relation(fields: [productId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id               Int @id @default(autoincrement())
  cartId           Int
  productVariantId Int
  quantity         Int

  cart           Cart           @relation(fields: [cartId], references: [id])
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
}

model Order {
  id         Int      @id @default(autoincrement())
  userId     Int
  totalPrice Decimal  @db.Decimal(10, 2)
  status     String
  createdAt  DateTime @default(now())

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]   
}

model OrderItem {
  id               Int     @id @default(autoincrement())
  orderId          Int
  productVariantId Int
  quantity         Int
  priceAtPurchase  Decimal @db.Decimal(10, 2)

  order          Order          @relation(fields: [orderId], references: [id])
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
}
